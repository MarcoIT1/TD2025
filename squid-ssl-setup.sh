#!/bin/bash

# squid-ssl-bump-setup.sh
# Complete Squid Proxy with SSL-Bump HTTPS Interception Setup Script for Ubuntu

set -e  # Exit on any error

LOG_FILE="/var/log/squid-ssl-setup.log"
exec > >(tee -a "$LOG_FILE") 2>&1

echo "=== Squid SSL-Bump Proxy Setup Started at $(date) ==="

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to update system
update_system() {
    echo "Updating system packages..."
    apt update && apt upgrade -y
}

# Function to install Squid with SSL support - FIXED VERSION
install_squid() {
    echo "Installing Squid proxy server with SSL support..."
    
    # Remove any existing squid installation first
    apt remove -y squid squid-openssl || true
    apt autoremove -y || true
    
    # Install squid-openssl (which provides SSL support)
    apt install -y squid-openssl openssl
    
    # Verify SSL support
    if squid -v | grep -q "openssl\|ssl"; then
        echo "✅ Squid installed with SSL support"
    else
        echo "❌ Squid SSL support verification failed"
        squid -v | grep -i ssl || true
        echo "Continuing anyway - SSL support may still work"
    fi
}

# Function to create SSL certificate authority
create_ssl_ca() {
    echo "Creating SSL Certificate Authority for HTTPS interception..."
    
    # Create SSL directory
    mkdir -p /etc/squid/ssl_cert
    cd /etc/squid/ssl_cert
    
    # Generate CA private key
    openssl genrsa -out squid-ca-key.pem 4096
    
    # Generate CA certificate
    openssl req -new -x509 -days 3650 -key squid-ca-key.pem -out squid-ca-cert.pem -subj "/C=US/ST=State/L=City/O=Organization/OU=IT Department/CN=Squid CA"
    
    # Combine certificate and key for Squid
    cat squid-ca-cert.pem squid-ca-key.pem > squid-ca-cert-key.pem
    
    # Set proper permissions
    chown -R proxy:proxy /etc/squid/ssl_cert
    chmod 600 /etc/squid/ssl_cert/*
    
    echo "✅ SSL Certificate Authority created successfully"
}

# Function to setup SSL certificate database
setup_ssl_db() {
    echo "Setting up SSL certificate database..."
    
    # Create SSL database directory
    mkdir -p /var/spool/squid/ssl_db
    chown proxy:proxy /var/spool/squid/ssl_db
    
    # Find the correct path for security_file_certgen
    CERTGEN_PATH=""
    for path in "/usr/lib/squid/security_file_certgen" "/usr/libexec/squid/security_file_certgen" "/usr/lib/squid3/security_file_certgen"; do
        if [[ -x "$path" ]]; then
            CERTGEN_PATH="$path"
            break
        fi
    done
    
    if [[ -z "$CERTGEN_PATH" ]]; then
        echo "❌ security_file_certgen not found, searching..."
        find /usr -name "security_file_certgen" -type f 2>/dev/null || true
        echo "Trying to continue without SSL certificate database initialization..."
        return 0
    fi
    
    echo "Found security_file_certgen at: $CERTGEN_PATH"
    
    # Initialize SSL certificate database
    "$CERTGEN_PATH" -c -s /var/spool/squid/ssl_db -M 4MB
    chown -R proxy:proxy /var/spool/squid/ssl_db
    
    echo "✅ SSL certificate database initialized"
}

# Function to backup original config
backup_config() {
    echo "Backing up original Squid configuration..."
    if [[ ! -f /etc/squid/squid.conf.original ]]; then
        cp /etc/squid/squid.conf /etc/squid/squid.conf.original
        echo "Original config backed up to /etc/squid/squid.conf.original"
    fi
}

# Function to configure Squid with SSL-Bump
configure_squid() {
    echo "Configuring Squid proxy with SSL-Bump HTTPS interception..."
    
    # Find the correct path for security_file_certgen
    CERTGEN_PATH=""
    for path in "/usr/lib/squid/security_file_certgen" "/usr/libexec/squid/security_file_certgen" "/usr/lib/squid3/security_file_certgen"; do
        if [[ -x "$path" ]]; then
            CERTGEN_PATH="$path"
            break
        fi
    done
    
    if [[ -z "$CERTGEN_PATH" ]]; then
        CERTGEN_PATH="/usr/lib/squid/security_file_certgen"  # Default fallback
    fi
    
    cat > /etc/squid/squid.conf << EOF
# Squid Proxy Configuration with SSL-Bump HTTPS Interception
# Generated by automated setup script

# SSL-Bump Configuration
http_port 3128 ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB cert=/etc/squid/ssl_cert/squid-ca-cert-key.pem

# SSL-Bump ACLs
acl step1 at_step SslBump1
acl step2 at_step SslBump2
acl step3 at_step SslBump3

# SSL-Bump Rules
ssl_bump peek step1
ssl_bump bump step2
ssl_bump bump step3

# SSL certificate generation
sslcrtd_program $CERTGEN_PATH -s /var/spool/squid/ssl_db -M 4MB
sslcrtd_children 8 startup=1 idle=1

# Always allow SSL connections
acl SSL_ports port 443
acl CONNECT method CONNECT

# Access Control Lists (ACLs)
acl localnet src 10.0.0.0/8     # RFC1918 possible internal network
acl localnet src 172.16.0.0/12  # RFC1918 possible internal network
acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
acl localnet src fc00::/7        # RFC 4193 local private network range
acl localnet src fe80::/10       # RFC 4291 link-local (directly plugged) machines

acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443         # https
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http

# Access Rules
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
http_access allow localnet
http_access allow localhost
http_access deny all

# Cache settings
coredump_dir /var/spool/squid

# Cache memory and disk settings
cache_mem 256 MB
maximum_object_size_in_memory 512 KB
cache_dir ufs /var/spool/squid 1000 16 256

# Logging
access_log /var/log/squid/access.log squid
cache_log /var/log/squid/cache.log
cache_store_log /var/log/squid/store.log

# DNS settings
dns_nameservers 8.8.8.8 8.8.4.4

# Refresh patterns
refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern .               0       20%     4320

# Error page customization
error_directory /usr/share/squid/errors/English

# Performance tuning
client_lifetime 1 hour
half_closed_clients off
pconn_timeout 60 seconds
request_timeout 30 seconds

# Security settings
forwarded_for delete
via off
httpd_suppress_version_string on

# Memory pools
memory_pools off

# SSL options
sslproxy_cert_error allow all
sslproxy_flags DONT_VERIFY_PEER
EOF

    echo "Squid SSL-Bump configuration file created successfully"
}

# Function to set up UFW firewall rules
setup_firewall() {
    echo "Setting up firewall rules..."
    
    # Install UFW if not present
    apt install -y ufw
    
    # Allow SSH (important!)
    ufw allow ssh
    
    # Allow Squid proxy port
    ufw allow 3128/tcp
    
    # Enable UFW
    ufw --force enable
    
    echo "Firewall configured successfully"
}

# Function to start and enable Squid service
setup_service() {
    echo "Setting up Squid service..."
    
    # Enable Squid to start on boot
    systemctl enable squid
    
    # Start Squid service
    systemctl restart squid
    
    # Wait for service to start
    sleep 5
    
    # Check service status
    if systemctl is-active --quiet squid; then
        echo "✅ Squid service is running successfully"
    else
        echo "❌ Failed to start Squid service"
        echo "Checking service status and logs..."
        systemctl status squid --no-pager || true
        echo "Recent logs:"
        journalctl -u squid --no-pager -n 20 || true
        echo "Cache log:"
        tail -20 /var/log/squid/cache.log 2>/dev/null || true
    fi
}

# Function to install CA certificate for testing
install_ca_certificate() {
    echo "Installing CA certificate for system trust..."
    
    # Copy CA certificate to system trust store
    cp /etc/squid/ssl_cert/squid-ca-cert.pem /usr/local/share/ca-certificates/squid-ca.crt
    
    # Update system certificate store
    update-ca-certificates
    
    echo "✅ CA certificate installed in system trust store"
}

# Function to verify SSL-Bump installation
verify_ssl_installation() {
    echo "Verifying Squid SSL-Bump installation..."
    
    # Check if Squid is listening on port 3128
    if ss -tlnp | grep -q ":3128"; then
        echo "✅ Squid is listening on port 3128"
    else
        echo "❌ Squid is not listening on port 3128"
        echo "Checking what's running on port 3128:"
        ss -tlnp | grep 3128 || echo "Nothing found on port 3128"
    fi
    
    # Check SSL certificate database
    if [[ -d /var/spool/squid/ssl_db ]]; then
        echo "✅ SSL certificate database exists"
    else
        echo "❌ SSL certificate database not found"
    fi
    
    # Test HTTP proxy
    echo "Testing HTTP proxy functionality..."
    if timeout 10 curl -x http://localhost:3128 --connect-timeout 10 -s http://httpforever.com/ > /dev/null 2>&1; then
        echo "✅ HTTP proxy test successful"
    else
        echo "⚠️ HTTP proxy test failed - check logs"
    fi
    
    # Test HTTPS interception
    echo "Testing HTTPS interception functionality..."
    if timeout 10 curl -x localhost:3128 --insecure -s https://httpbin.org/ip > /dev/null 2>&1; then
        echo "✅ HTTPS interception test successful"
    else
        echo "⚠️ HTTPS interception test failed - this is normal if SSL-bump isn't fully configured"
    fi
    
    # Show service status
    echo ""
    echo "=== Squid Service Status ==="
    systemctl status squid --no-pager || true
    
    echo ""
    echo "=== Squid Listening Ports ==="
    ss -tlnp | grep squid || echo "No squid processes found in netstat"
    
    echo ""
    echo "=== Squid Processes ==="
    ps aux | grep squid | grep -v grep || echo "No squid processes found"
}

# Function to display completion message
show_completion() {
    echo ""
    echo "========================================================="
    echo "🎉 Squid SSL-Bump HTTPS Interception Setup Complete! 🎉"
    echo "========================================================="
    echo ""
    echo "📋 Configuration Summary:"
    echo "   • Proxy Server: $(hostname -I | awk '{print $1}'):3128"
    echo "   • Protocol: HTTP/HTTPS Proxy with SSL-Bump"
    echo "   • SSL Interception: ✅ CONFIGURED"
    echo "   • Config File: /etc/squid/squid.conf"
    echo "   • CA Certificate: /etc/squid/ssl_cert/squid-ca-cert.pem"
    echo "   • SSL Database: /var/spool/squid/ssl_db"
    echo "   • Log Files: /var/log/squid/"
    echo "   • Service: squid (enabled for auto-start)"
    echo ""
    echo "🔧 Client Configuration:"
    echo "   • Proxy Host: $(hostname -I | awk '{print $1}')"
    echo "   • Proxy Port: 3128"
    echo "   • Proxy Type: HTTP (handles both HTTP & HTTPS)"
    echo ""
    echo "🔒 HTTPS Interception Testing:"
    echo "   • Test HTTP: curl -x http://localhost:3128 http://httpforever.com/"
    echo "   • Test HTTPS: curl -x localhost:3128 --insecure https://httpbin.org/ip"
    echo "   • Monitor logs: sudo tail -f /var/log/squid/access.log"
    echo ""
    echo "📊 Useful Commands:"
    echo "   • Check status: sudo systemctl status squid"
    echo "   • View access logs: sudo tail -f /var/log/squid/access.log"
    echo "   • View cache logs: sudo tail -f /var/log/squid/cache.log"
    echo "   • Restart service: sudo systemctl restart squid"
    echo "   • Check config: sudo squid -k parse"
    echo ""
    echo "⚠️  Important Notes:"
    echo "   • CA certificate: /etc/squid/ssl_cert/squid-ca-cert.pem"
    echo "   • Install this CA on client devices for trusted HTTPS interception"
    echo "   • Use --insecure flag with curl for testing without CA installation"
    echo ""
    echo "Setup completed at $(date)"
    echo "Log file: $LOG_FILE"
}

# Main execution
main() {
    echo "Starting Squid SSL-Bump HTTPS Interception automated setup..."
    
    check_root
    update_system
    install_squid
    create_ssl_ca
    setup_ssl_db
    backup_config
    configure
